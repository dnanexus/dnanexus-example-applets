#!/usr/bin/env python
#
# Copyright (C) 2013 DNAnexus, Inc.
#   This file is part of dnanexus-example-applets.
#   You may use this file under the terms of the Apache License, Version 2.0;
#   see the License.md file for more information.


# gatk_variant_recalibrator 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See http://wiki.dnanexus.com/Developer-Tutorials/Intro-to-Building-Apps
# for instructions on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import dxpy

import time
import subprocess
from multiprocessing import Pool, cpu_count

@dxpy.entry_point('main')
def main(vcf_files, reference, known_resources, training_resources, truth_resources, priors, params="-mode SNP -maxGaussians 4 -percentBad 0.05", annotations="-an QD -an HaplotypeScore -an MQRankSum -an ReadPosRankSum -an FS -an MQ -an DP"):

    dxpy.download_dxfile(dxpy.DXFile(reference).get_id(), "ref.fa.gz")
    subprocess.check_call("gzip -d ref.fa.gz", shell=True)

    base_name = dxpy.DXFile(vcf_files[0]).describe()['name'].replace('.vcf', '')

    input_command = ''
    for i in range(len(vcf_files)):
        fh = dxpy.DXFile(vcf_files[i])
        input_command += " -input %s" % (fh.describe()['name'])
        dxpy.download_dxfile(fh.get_id(), fh.describe()['name'])

    resources_files = {}

    try:
        entry = 0
        for x in known_resources:
            name = dxpy.DXFile(x).describe()['name']
            resources_files[name] = {"known":"true", "training":"false", "truth":"false", "prior": priors[entry]}
            dxpy.download_dxfile(dxpy.DXFile(x).get_id(), name)
            entry += 1
        for x in training_resources:
            name = dxpy.DXFile(x).describe()['name']
            if resources_files.get(name) == None:
                resources_files[name] = {"known":"false", "training":"true", "truth":"false", "prior": priors[entry]}
                dxpy.download_dxfile(dxpy.DXFile(x).get_id(), name)
                entry += 1
            else:
                resources_files[name]["training"] = "true"

        for x in truth_resources:
            name = dxpy.DXFile(x).describe()['name']
            if resources_files.get(name) == None:
                resources_files[name] = {"known":"false", "training":"false", "truth":"true", "prior":priors[entry]}
                dxpy.download_dxfile(dxpy.DXFile(x).get_id(), name)
                entry += 1
            else:
                resources_files[name]["truth"] = "true"
    except IndexError:
        raise dxpy.AppError("There were fewer entries for priors than there were unique resources files: %d unique resource files and %d priors" % (len(resource_files), len(priors)))
    if len(priors) > entry:
        raise dxpy.AppError("There were more entries for priors than there were unique resources files: %d unique resource files and %d priors" % (len(resource_files), len(priors)))

    resources_command = ''
    for name, properties in resources_files.iteritems():
        if name[-3:] == ".gz":
            subprocess.check_call("gzip -d %s" % name, shell=True)
            name = name[:-3]
        resources_command += " -resource:%s,known=%s,training=%s,truth=%s,prior=%f %s" % (name, properties["known"], properties["training"], properties["truth"], properties["prior"], name)

    p = subprocess.Popen("java -Xmx6g -jar /opt/jar/GenomeAnalysisTK.jar -T VariantRecalibrator -R ref.fa -recalFile %s.recal -tranchesFile %s.tranches -rscriptFile %s.plots.R --num_threads %d %s %s %s %s" % (base_name, base_name, base_name, cpu_count(), input_command, resources_command, annotations, params), stderr=subprocess.PIPE, stdout=subprocess.PIPE, shell=True)

    try:
        p.wait()
        print p.stdout.read()
        print p.stderr.read()
    except:
        print p.stdout.read()
        print p.stderr.read()

    # Fill in your application code here.

    # The following line(s) use the Python bindings to upload your file outputs
    # after you have created them on the local file system.  It assumes that you
    # have used the output field name for the filename for each output, but you
    # can change that behavior to suit your needs.

    recalibration_file = dxpy.upload_local_file("%s.recal" % base_name);
    tranches_file = dxpy.upload_local_file("%s.tranches" % base_name);
    r_plot = dxpy.upload_local_file("%s.plots.R" % base_name);

    # The following line fills in some basic dummy output and assumes
    # that you have created variables to represent your output with
    # the same name as your output fields.

    output = {}
    output["tranches_file"] = dxpy.dxlink(tranches_file)
    output["recalibration_file"] = dxpy.dxlink(recalibration_file)
    output["r_plot"] = dxpy.dxlink(r_plot)

    return output

dxpy.run()
