#!/bin/bash
# gsnap 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See http://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of fastq_1: '$fastq_1'"
    echo "Value of fastq_2: '$fastq_2'"
    echo "Value of genome_db: '$genome_db'"
    echo "Value of gene_model: '$gene_model'"
    echo "Value of params: '$params'"
    echo "Value of output_name: '$output_name'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    echo "Downloading FASTQ(s) and genome database to worker..."
    dx download "$fastq_1" -o fastq_1
    if [[ ! -z "$fastq_2" ]]
    then
	dx download "$fastq_2" -o fastq_2
    fi
    echo "FASTQ(s) downloaded"
    dx download "$genome_db" -o genome_db.tar
    mkdir genome_db
    tar xf genome_db.tar -C genome_db
    genome_name=`ls genome_db`
    echo "Genome downloaded and unpacked...  Found $genome_name"


    echo "Downaloading and converting Gene Model..."
    dx download "$gene_model" -o gene_model.gz
    gunzip -c gene_model.gz | psl_splicesites -s 1 > gene_model.splicesites
    cat gene_model.splicesites | iit_store -o gene_model.splicesites
    cp gene_model.splicesites.iit genome_db/${genome_name}/${genome_name}.maps

    # Fill in your application code here.
    #

    echo "Building GSNAP command..."
    echo "Detected $(nproc) processors..."

    # GSNAP recommends saving two threads for file I/O, not doing that right now
    num_threads=`expr $(nproc)`

    cmd="gsnap --gunzip -A sam -t $num_threads $params -d $genome_name -D genome_db/$genome_name -s gene_model.splicesites fastq_1"
    if [[ ! -z "$fastq_2" ]]
    then
	cmd="$cmd fastq_2"
    fi

    echo "Executing $cmd"
    $cmd | samtools view -bS - > ${output_name}.bam

    echo "GSNAP complete!"

    ls -l

    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    bam_file=$(dx upload ${output_name}.bam --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output bam_file "$bam_file" --class=file
}
