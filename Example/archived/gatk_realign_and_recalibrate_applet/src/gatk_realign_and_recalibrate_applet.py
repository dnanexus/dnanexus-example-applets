#!/usr/bin/env python
#
# Copyright (C) 2013 DNAnexus, Inc.
#   This file is part of dnanexus-example-applets.
#   You may use this file under the terms of the Apache License, Version 2.0;
#   see the License.md file for more information.


# gatk_realign_and_recalibrate_applet 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See http://wiki.dnanexus.com/Developer-Tutorials/Intro-to-Building-Apps
# for instructions on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import dxpy

import subprocess
from multiprocessing import Pool, cpu_count

@dxpy.entry_point('main')
def main(BAM, reference, dbsnp, known_indels,  count_covariates_params='', target_creator_params='', indel_realigner_params='', table_recalibrator_params=''):

    # The following line(s) initialize your data object inputs on the platform
    # into dxpy.DXDataObject instances that you can start using immediately.

    BAM = dxpy.DXFile(BAM)
    reference = dxpy.DXFile(reference)
    dbsnp = dxpy.DXFile(dbsnp)

    known_indels_array = []
    if known_indels != None:
        for i in range(len(known_indels)):
            known_indels_array.append(dxpy.DXFile(known_indels[i]))

    name = BAM.describe()['name'].replace(".bam", '').replace(".dedup", '')

    # The following line(s) download your file inputs to the local file system
    # using variable names for the filenames.

    dxpy.download_dxfile(BAM.get_id(), "input.bam")
    dxpy.download_dxfile(reference.get_id(), "ref.fa.gz")
    dxpy.download_dxfile(dbsnp.get_id(), "dbsnp.vcf.gz")

    # This method is used to download from an array of files and was not added by the app wizard

    for i in range(len(known_indels_array)):
        dxpy.download_dxfile(known_indels_array[i].get_id(), "indels" + str(i) + ".vcf.gz")

    # Fill in your application code here.

    subprocess.check_call("gzip -d ref.fa.gz", shell=True)

    # Prepare the reference genome
    subprocess.check_call("samtools index input.bam", shell=True)

    #Check usable reads in BAM
    p = subprocess.Popen("./samtools view -c -F 4 input.bam", stdout=subprocess.PIPE, shell=True)
    try:
        if int(p.communicate()[0].strip()) == 0:
            raise ValueError
    except ValueError:
        print "No mapped reads"
        output = {"BAM": dxpy.dxlink(BAM.get_id())}
        return output

    subprocess.check_call("samtools faidx %s" % name, shell=True)
    subprocess.check_call("java -Xmx4g -jar /opt/jar/CreateSequenceDictionary.jar REFERENCE=ref.fa OUTPUT=ref.dict", shell=True)

    # Create the command line options to include the known indels files
    known_indels_command = ''
    for i in range(len(known_indels_array)):
        known_indels_command += " -known indels%d.vcf.gz" % (i)

    # Run RealignerTargetCreator and IndelRealigner
    subprocess.check_call("java -Xmx4g -jar /opt/jar/GenomeAnalysisTK.jar -T RealignerTargetCreator -R %s -I input.bam -o indels.intervals --num_threads %d %s %s" % (ref_name, cpu_count(), target_creator_params, known_indels_command), shell=True)
    subprocess.check_call("java -Xmx4g -jar /opt/jar/GenomeAnalysisTK.jar -T IndelRealigner -R %s -I input.bam -targetIntervals indels.intervals -o realigned.bam %s %s" % (ref_name, indel_realigner_params, known_indels_command), shell=True)

    # Run CountCovariates
    subprocess.check_call("java -Xmx4g -jar /opt/jar/GenomeAnalysisTK.jar -T CountCovariates -R %s -I input.bam -recalFile recalibration.csv --num_threads %d -knownSites dbsnp.vcf.gz %s" % (ref_name, cpu_count(), count_covariates_params), shell=True)

    # Run TableRecalibrator
    subprocess.check_call("java -Xmx4g -jar /opt/jar/GenomeAnalysisTK.jar -T TableRecalibration -I input.bam -R %s -recalFile recalibration.csv -o %s.recalibrated.bam %s" % (ref_name, name, table_recalibrator_params), shell=True)

    # The following line(s) use the Python bindings to upload your file outputs
    # after you have created them on the local file system.  It assumes that you
    # have used the output field name for the filename for each output, but you
    # can change that behavior to suit your needs.

    BAM = dxpy.upload_local_file("%s.recalibrated.bam" % name);

    # The following line fills in some basic dummy output and assumes
    # that you have created variables to represent your output with
    # the same name as your output fields.

    output = {}
    output["BAM"] = dxpy.dxlink(BAM)

    return output

dxpy.run()
