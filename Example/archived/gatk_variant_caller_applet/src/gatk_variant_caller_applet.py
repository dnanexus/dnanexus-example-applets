#!/usr/bin/env python
#
# Copyright (C) 2013 DNAnexus, Inc.
#   This file is part of dnanexus-example-applets.
#   You may use this file under the terms of the Apache License, Version 2.0;
#   see the License.md file for more information.


# gatk_variant_caller_applet 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See http://wiki.dnanexus.com/Developer-Tutorials/Intro-to-Building-Apps
# for instructions on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import dxpy

import subprocess
from multiprocessing import Pool, cpu_count

@dxpy.entry_point('main')
def main(BAM, reference, params=''):

    # The following line(s) initialize your data object inputs on the platform
    # into dxpy.DXDataObject instances that you can start using immediately.

    BAM = dxpy.DXFile(BAM)
    reference = dxpy.DXFile(reference)

    # The following line(s) download your file inputs to the local file system
    # using variable names for the filenames.

    dxpy.download_dxfile(BAM.get_id(), "input.bam")
    dxpy.download_dxfile(reference.get_id(), "ref.fa.gz")

    # The following line extracts the name from the file object so that
    # outputs can be named intelligently. It is not automatically generated by
    # the app wizard.

    name = BAM.describe()['name'].rstrip(".bam").rstrip(".recalibrated").rstrip(".dedup")

    # Fill in your application code here.

    subprocess.check_call("gzip -d ref.fa.gz", shell=True)
    subprocess.check_call("samtools index input.bam", shell=True)
    subprocess.check_call("samtools faidx ref.fa", shell=True)
    subprocess.check_call("java -Xmx4g -jar /opt/jar/CreateSequenceDictionary.jar REFERENCE=ref.fa OUTPUT=ref.dict", shell=True)
    subprocess.check_call("java -Xmx4g -jar /opt/jar/GenomeAnalysisTK.jar -T UnifiedGenotyper -R ref.fa -I input.bam -o %s.vcf %s -nt %d" % (name, params, cpu_count()), shell=True)

    # The following line(s) use the Python bindings to upload your file outputs
    # after you have created them on the local file system.  It assumes that you
    # have used the output field name for the filename for each output, but you
    # can change that behavior to suit your needs.

    VCF = dxpy.upload_local_file("%s.vcf" % name);

    # The following line fills in some basic dummy output and assumes
    # that you have created variables to represent your output with
    # the same name as your output fields.

    output = {}
    output["VCF"] = dxpy.dxlink(VCF)

    return output

dxpy.run()
