#!/bin/bash
# picard_validate_sam_file 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See http://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of input_file: '$input_file'"
    echo "Value of output_name: '$output_name'"
    echo "Value of max_output: '$max_output'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$input_file" -o input_file

    if [ -z "$output_name" ] ; then
        dx-jobutil-report-error "Parameter output_name must be non-empty" AppError
        exit 1
    fi

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    cmd='java -jar /ValidateSamFile.jar INPUT=input_file OUTPUT=output_file'

    if [ -n "$max_output" ]
    then
        cmd="$cmd MAX_OUTPUT=$max_output"
    fi

    if [ -n "$mode" ]
    then
        cmd="$cmd MODE=$mode"
    fi

    # ValidateSamFile exits with a non-zero exit code if the file is
    # invalid. We don't want this to cause the app to exit (bash apps are
    # run with 'set -e'), so we add ' || true'.
    $cmd || true

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    output_file=$(dx upload output_file -o "$output_name" --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output output_file "$output_file" --class=file
}
