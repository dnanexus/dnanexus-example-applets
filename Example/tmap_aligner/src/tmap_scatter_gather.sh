#!/bin/bash
# tmap_scatter_gather 1.0.0
# Generated by dx-app-wizard.
#
# Scatter-process-gather execution pattern: Your app will split its
# input into multiple pieces, each of which will be processed in
# parallel, after which they are gathered together in some final
# output.
#
# This pattern is very similar to the "parallelized" template.  What
# it does differently is that it formally breaks out the "scatter"
# phase as a separate black-box entry point in the app.  (As a side
# effect, this requires a "map" entry point to call "process" on each
# of the results from the "scatter" phase.)
#
# Note that you can also replace any entry point in this execution
# pattern with an API call to run a separate app or applet.
#
# The following is a Unicode art picture of the flow of execution.
# Each box is an entry point, and vertical lines indicate that the
# entry point connected at the top of the line calls the entry point
# connected at the bottom of the line.  The letters represent the
# different stages in which the input is transformed, e.g. the output
# of the "scatter" entry point ("array:B") is given to the "map" entry
# point as input.  The "map" entry point calls as many "process" entry
# points as there are elements in its array input and gathers the
# results in its array output.
#
#          ┌──────┐
#       A->│ main │->D (output from "postprocess")
#          └┬─┬─┬─┘
#           │ │ │
#          ┌┴──────┐
#       A->│scatter│->array:B
#          └───────┘
#             │ │
#            ┌┴──────────────┐
#   array:B->│      map      │->array:C
#            └─────────┬─┬─┬─┘
#               │      │ . .
#               │     ┌┴──────┐
#               │  B->│process│->C
#               │     └───────┘
#            ┌──┴────────┐
#   array:C->│postprocess│->D
#            └───────────┘
#
# A = original app input, split up by "scatter" into pieces of type B
# B = an input that will be provided to a "process" entry point
# C = the output of a "process" entry point
# D = app output aggregated from the outputs of the "process" entry points
#
# See http://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.

main() {

    set -e -x

    echo "Value of reads: '$reads'"
    echo "Value of indexed_ref: '$indexed_ref'"
    echo "Value of chunk_size: '$chunk_size'"
    echo "Value of map_params: '$map_params'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    scatter_job=`dx run "Developer Applets:sff_splitter" -ireads="$reads" -ichunk_size="$chunk_size" -y --brief`

    echo $scatter_job

    map_job=$(dx-jobutil-new-job map -iarray_of_reads="$scatter_job":split_reads -iindexed_ref="$indexed_ref" -imap_params="$map_params")

    echo $map_job

    postprocess_job=`dx-jobutil-new-job postprocess -isplit_bams="$map_job":split_bams --depends-on "$map_job"`

    dx-jobutil-add-output mappings $postprocess_job:merged_bam --class=jobref
}

map() {
    set -e -x
    echo "Value of array_of_scattered_input: '${array_of_reads[@]}'"
    echo "Value of indexed_ref: '${indexed_ref}'"
    echo "Value of map_params: '${map_params}'"

    #eval process_args=("$process_inputs")

    for scattered_input in "${array_of_reads[@]}"
    do
        process_job=`dx-jobutil-new-job process -ireads="$scattered_input" -iindexed_ref="$indexed_ref" -imap_params="$map_params"`

        dx-jobutil-add-output split_bams --array "$process_job":split_bam
    done
}

process() {
    set -e -x
    echo "Value of reads: '${reads}'"
    echo "Value of indexed_ref: '${indexed_ref}'"
    echo "Value of map_params: '${map_params}'"

    # Fill in code here to process the input and create output.

    dx download "$reads" -o reads
    dx download "$indexed_ref" -o reference.fasta.tar.gz
    
    tar xzf reference.fasta.tar.gz

    ls -l

    tmap $map_params -r reads -f reference.fasta -o 1 -s mappings.bam

    mappings_id=`dx upload mappings.bam --brief`

    dx-jobutil-add-output split_bam "$mappings_id"
}

postprocess() {
    set -x
    echo "Value of process_outputs: '${split_bams[@]}'"

    i=0
    for bam in "${split_bams[@]}"
    do
	ls -l
	dx download "$bam" -o "$i".bam
	ls -l
	let i=i+1
    done

    if [ "${#split_bams[@]}" == "1" ]
    then
	mv 0.bam mappings.bam
    else
	samtools merge mappings.bam *.bam
    fi

    merged_mappings=`dx upload mappings.bam --brief`

    dx-jobutil-add-output merged_bam "$merged_mappings"
}
