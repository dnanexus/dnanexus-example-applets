#!/usr/bin/env python
#
# Copyright (C) 2013 DNAnexus, Inc.
#   This file is part of dnanexus-example-applets.
#   You may use this file under the terms of the Apache License, Version 2.0;
#   see the License.md file for more information.


# gatk_apply_variant_recalibration 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See http://wiki.dnanexus.com/Developer-Tutorials/Intro-to-Building-Apps
# for instructions on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import dxpy

import subprocess

@dxpy.entry_point('main')
def main(vcf_files, reference, tranches_file, recalibration_file, filter_level=95.0, params="-mode SNP"):

    # The following line(s) initialize your data object inputs on the platform
    # into dxpy.DXDataObject instances that you can start using immediately.

    reference = dxpy.DXFile(reference)
    tranches_file = dxpy.DXFile(tranches_file)
    recalibration_file = dxpy.DXFile(recalibration_file)

    base_name = dxpy.DXFile(vcf_files[0]).describe()['name'].replace('.vcf', '')
    input_command = ''
    for i in range(len(vcf_files)):
        fh = dxpy.DXFile(vcf_files[i])
        input_command += " -input %s" % (fh.describe()['name'])
        dxpy.download_dxfile(fh.get_id(), fh.describe()['name'])

    # The following line(s) download your file inputs to the local file system
    # using variable names for the filenames.

    dxpy.download_dxfile(reference.get_id(), "ref.fa.gz")
    dxpy.download_dxfile(tranches_file.get_id(), "%s.tranches" % base_name)
    dxpy.download_dxfile(recalibration_file.get_id(), "%s.recal" % base_name)

    # Fill in your application code here.

    subprocess.check_call("gzip -d ref.fa.gz", shell=True)
    subprocess.check_call("java -Xmx4g -jar /opt/jar/GenomeAnalysisTK.jar -T ApplyRecalibration -R ref.fa %s --tranches_file %s.tranches --recal_file %s.recal --out %s_variant_recalibrated.vcf --ts_filter_level %f %s" % (input_command, base_name, base_name, base_name, filter_level, params), shell=True)

    # The following line(s) use the Python bindings to upload your file outputs
    # after you have created them on the local file system.  It assumes that you
    # have used the output field name for the filename for each output, but you
    # can change that behavior to suit your needs.

    recalibrated_variants = dxpy.upload_local_file("%s_variant_recalibrated.vcf" % base_name);

    # The following line fills in some basic dummy output and assumes
    # that you have created variables to represent your output with
    # the same name as your output fields.

    output = {}
    output["recalibrated_variants"] = dxpy.dxlink(recalibrated_variants)

    return output

dxpy.run()
