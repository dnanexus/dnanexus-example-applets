2017-07-25 16:20:23,238 : removing: /Users/sosazuwa/dnanexus-example-applets/docs/_tutorials/samtools_count_catmkfifo_sh.md
2017-07-25 16:20:23,239 : Front matter field: source value samtools_count_catmkfifo_sh
2017-07-25 16:20:23,239 : Front matter field: title value SAMtools count w/ mkfifo and dx cat
2017-07-25 16:20:23,240 : Front matter field: tutorial_type value basic
2017-07-25 16:20:23,240 : Front matter field: language value bash
2017-07-25 16:20:23,240 : front matter written
2017-07-25 16:20:23,240 : Code region search
2017-07-25 16:20:23,240 : regular comment, line: #!/bin/bash
2017-07-25 16:20:23,241 : regular comment, line: # samtools_count_catmkfifo_sh 0.0.1
2017-07-25 16:20:23,241 : regular comment, line: #
2017-07-25 16:20:23,241 : regular comment, line: # This app performs a SAMtools count via the following implementation:
2017-07-25 16:20:23,241 : regular comment, line: #   - Bam file download is performed via dx cat.
2017-07-25 16:20:23,241 : regular comment, line: #   - Files are handled using FIFO special files.
2017-07-25 16:20:23,242 : regular comment, line: #     - Similar to piping, any storage on the local system is avoided.
2017-07-25 16:20:23,242 : regular comment, line: #   - Files will be uploaded once the job is done via dx-upload-all-outputs.
2017-07-25 16:20:23,242 : regular comment, line: #   - SAMtools is provided as a precompiled binary in resources/usr/bin.
2017-07-25 16:20:23,242 : regular comment, line: #
2017-07-25 16:20:23,242 : regular comment, line: # NOTE:
2017-07-25 16:20:23,242 : regular comment, line: #   When deciding to use FIFO special files to reduce memory requirements on machine
2017-07-25 16:20:23,243 : regular comment, line: #   know that the same limitations that apply to pipes also apply to FIFO files.
2017-07-25 16:20:23,243 : regular comment, line: #     - FIFO special files used with a command/script that requires random access will fail/hang.
2017-07-25 16:20:23,243 : regular comment, line: #     - FIFO special files need both a stdin and stdout to not block execution.
2017-07-25 16:20:23,243 : regular comment, line: #
2017-07-25 16:20:23,243 : regular comment, line: #
2017-07-25 16:20:23,244 : regular comment, line: # SECTION: Debugging setup
2017-07-25 16:20:23,244 : Section change to: Debugging setup
2017-07-25 16:20:23,244 : regular comment, line: # ---------------
2017-07-25 16:20:23,245 : regular comment, line: # The -e flag causes bash to exit at any point if there is any error,
2017-07-25 16:20:23,245 : regular comment, line: # the -o pipefail flag tells bash to throw an error if it encounters an error within a pipeline,
2017-07-25 16:20:23,245 : regular comment, line: # the -x flag causes bash to output each line as it is executed
2017-07-25 16:20:23,245 : regular comment, line: #
2017-07-25 16:20:23,245 : regular comment, line: # Create a working directory so files are easy to find if ssh is needed
2017-07-25 16:20:23,245 : regular comment, line: #
2017-07-25 16:20:23,246 : regular comment, line: # In addition we'll echo the JSON inputs to stdout
2017-07-25 16:20:23,246 : regular comment, line: #
2017-07-25 16:20:23,246 : regular comment, line: #
2017-07-25 16:20:23,246 : regular comment, line: # SECTION: Downloading as input stream
2017-07-25 16:20:23,246 : Section change to: Downloading as input stream
2017-07-25 16:20:23,247 : regular comment, line: # ---------------------------
2017-07-25 16:20:23,247 : regular comment, line: # Using a FIFO special file we create a sequential file stream through cat command
2017-07-25 16:20:23,247 : regular comment, line: #
2017-07-25 16:20:23,247 : regular comment, line: # A fifo file operates as a named pipe.
2017-07-25 16:20:23,247 : regular comment, line: # As a result both readinga and writing must happen at the same time.
2017-07-25 16:20:23,247 : regular comment, line: #
2017-07-25 16:20:23,248 : regular comment, line: # After a dx download the downloaded BAM filename is stored in the var $sorted_bam_name
2017-07-25 16:20:23,248 : regular comment, line: #
2017-07-25 16:20:23,250 : regular comment, line: # & runs the command in the background and is needed to ensure the foreground execution isn't blocked
2017-07-25 16:20:23,250 : regular comment, line: # Remember fifo files need both a stdin and stdout to not block.
2017-07-25 16:20:23,250 : regular comment, line: #
2017-07-25 16:20:23,251 : regular comment, line: # SECTION: Processing input stream to output stream
2017-07-25 16:20:23,251 : Section change to: Processing input stream to output stream
2017-07-25 16:20:23,251 : regular comment, line: # ----------------------------------------------------------
2017-07-25 16:20:23,251 : regular comment, line: # samtools view -c can be performed on the established fifo.
2017-07-25 16:20:23,251 : regular comment, line: #
2017-07-25 16:20:23,252 : regular comment, line: #   Directory structure created here ~/out/counts_txt is required to use dx-upload-all-outputs
2017-07-25 16:20:23,252 : regular comment, line: #   All files found in the path ~/out/<output name> will be uploaded to the corresponding
2017-07-25 16:20:23,252 : regular comment, line: #   <output name> specified in the dxapp.json.
2017-07-25 16:20:23,252 : regular comment, line: #
2017-07-25 16:20:23,252 : regular comment, line: # By providing the samtools view as a reader the named pipe can be completed and used here.
2017-07-25 16:20:23,253 : regular comment, line: # we'll establish a stdout to readcount.txt
2017-07-25 16:20:23,253 : regular comment, line: # SAMtools count is performed with &
2017-07-25 16:20:23,253 : regular comment, line: # without the & this would block this shell execution since readcount.txt fifo has a stdin, but no stdout
2017-07-25 16:20:23,253 : regular comment, line: #
2017-07-25 16:20:23,253 : regular comment, line: # SECTION: Provide job output
2017-07-25 16:20:23,253 : Section change to: Provide job output
2017-07-25 16:20:23,254 : regular comment, line: # ------------------
2017-07-25 16:20:23,254 : regular comment, line: # By providing the dx-jobutil-add-output as a reader of readcount.txt
2017-07-25 16:20:23,254 : regular comment, line: # all fifo special files in our pipeline can be executed and closed.
2017-07-25 16:20:23,254 : regular comment, line: #
2017-07-25 16:20:23,254 : regular comment, line: #
2017-07-25 16:20:23,255 : regular comment, line: # SECTION: Wait for blocked background processes to finish
2017-07-25 16:20:23,255 : Section change to: Wait for blocked background processes to finish
2017-07-25 16:20:23,255 : regular comment, line: # -----------------------------------------------
2017-07-25 16:20:23,255 : regular comment, line: # Now that all FIFO special files have are open to both
2017-07-25 16:20:23,255 : regular comment, line: # reading and writing background processes can finish.
2017-07-25 16:20:23,255 : regular comment, line: #
2017-07-25 16:20:23,256 : regular comment, line: # SECTION-END
2017-07-25 16:20:23,256 : Section change to: None
2017-07-25 16:20:23,257 : Code regions created
2017-07-25 16:20:23,260 : Force line match: {% include warning.html content="Named pipes require **BOTH** a *stdin* and *stdout* or they will block a process. In these examples, we place incomplete named pipes in background processes so the foreground script process does not block." %}
2017-07-25 16:20:23,261 : Kramdown section in /Users/sosazuwa/dnanexus-example-applets/Tutorials/bash/samtools_count_catmkfifo_sh/Readme.md Downloading as input stream
2017-07-25 16:20:23,261 : Kramdown section in /Users/sosazuwa/dnanexus-example-applets/Tutorials/bash/samtools_count_catmkfifo_sh/Readme.md Processing input stream to output stream
2017-07-25 16:20:23,261 : Kramdown section in /Users/sosazuwa/dnanexus-example-applets/Tutorials/bash/samtools_count_catmkfifo_sh/Readme.md Processing input stream to output stream
2017-07-25 16:20:23,261 : Force line match: {% include note.html content="Alternatively, `dx upload *-*` can upload directly from *stdin*. In this example, we would no longer need to have the directory structure required for `dx-upload-all-outputs`." %}
2017-07-25 16:20:23,262 : Force line match: {% include warning.html content="When uploading a file that exists on disk `dx upload` is aware of the file size and automatically handles any Cloud Service Provider upload part requirements. When uploading as a stream, the file size is not automatically known and `dx upload` uses default parameters. While these parameters are fine for most use cases, you may need to specify upload part size with the `--buffer-size` option." %}
2017-07-25 16:20:23,262 : Kramdown section in /Users/sosazuwa/dnanexus-example-applets/Tutorials/bash/samtools_count_catmkfifo_sh/Readme.md Wait for blocked background processes to finish
2017-07-25 16:20:23,262 : Force line match: {% include note.html content="If we didn't wait the app script would running in the foreground would finish and terminate the job! We wouldn't want that." %}
2017-07-25 16:20:23,262 : Force line match: ## Applet Script
2017-07-25 16:20:23,262 : Adding Func: FULL SCRIPT
